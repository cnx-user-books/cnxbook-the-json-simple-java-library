<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Json0230: Decoding JSON Arrays</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m61744</md:content-id>
  <md:title>Json0230: Decoding JSON Arrays</md:title>
  <md:abstract>Learn how to read a JSON string containing nested array data from a file, decode it, and display its component parts.</md:abstract>
  <md:uuid>b308e37f-38d1-4807-a730-03c8bc263a37</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Thu Jun 02 19:28:45 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

        

<item id="li1000">

        

<link id="a1000" url="http://cnx.org/contents/5sRB9gpG">


<emphasis id="em1001" effect="italics">
The json-simple Java Library

</emphasis>
</link>

.

</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/yWyT-uhM">


<emphasis id="em1002" effect="italics">
INEW2338 - Advanced Java Programming

</emphasis>
</link>


</item>


	

<item id="li1002">

	

<link id="a1002" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1003" effect="italics">
Object-Oriented Programming (OOP) with Java

</emphasis>
</link>


</item>




</list>















<section id="h11000">
<title>
<emphasis id="Table_of_contents" effect="bold">

Table of contents

</emphasis>


</title>







<list id="ul1001" list-type="bulleted">
<item id="li1003">
<link id="a1003" target-id="Table_of_contents">

Table of contents

</link>




</item>


<item id="li1004">
<link id="a1004" target-id="Preface">

Preface

</link>




<list id="ul1002" list-type="bulleted">
<item id="li1005">
<link id="a1005" target-id="Viewing_tip">

Viewing tip

</link>




<list id="ul1003" list-type="bulleted">
<item id="li1006">
<link id="a1006" target-id="Figures">

Figures

</link>




</item>


<item id="li1007">
<link id="a1007" target-id="Listings">

Listings

</link>




</item>


</list>


</item>


</list>


</item>


<item id="li1008">
<link id="a1008" target-id="General_background_information">

General 
	background information

</link>




</item>


<item id="li1009">
<link id="a1009" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>




<list id="ul1004" list-type="bulleted">
<item id="li1010">
<link id="a1010" target-id="Read_the_file_containing_the_JSON_string">

Read the file containing 
the JSON string

</link>




</item>


<item id="li1011">
<link id="a1011" target-id="Display_the_JSON_string">

Display the JSON string

</link>




</item>


<item id="li1012">
<link id="a1012" target-id="Access_the_game_array">

Access the game array

</link>




</item>


<item id="li1013">
<link id="a1013" target-id="Get_information_about_the_first_player">

Get information about the 
first player

</link>




</item>


<item id="li1014">
<link id="a1014" target-id="Display_first_players_cards">

Display first player's cards

</link>




</item>


<item id="li1015">
<link id="a1015" target-id="Get_and_display_information_about_the_second_player">

Get and 
display information about the second player

</link>




</item>


<item id="li1016">
<link id="a1016" target-id="The_end_of_the_program">

The end of the program

</link>




</item>


</list>


</item>


<item id="li1017">
<link id="a1017" target-id="Run_the_program">

Run the program

</link>




</item>


<item id="li1018">
<link id="a1018" target-id="Complete_program_listings">

Complete program listing

</link>




</item>


<item id="li1019">
<link id="a1019" target-id="Miscellaneous">

Miscellaneous

</link>




</item>


</list>




	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This is a page from the book titled 

<emphasis id="strong1000" effect="bold">
The json-simple Java Library

</emphasis>
. The book explains how to use the 
	

<emphasis id="strong1001" effect="bold">
json-simple

</emphasis>
 Java library to generate, transform, and query 
	JSON text. This page explains how to read a JSON string containing nested 
	array data from a file, decode it, and display its component parts.

</para>



	
	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1020">
<link id="a1020" target-id="Figure_1">

Figure 1

</link>

. Screen shot of raw JSON string.

</item>


		

<item id="li1021">
<link id="a1021" target-id="Figure_2">

Figure 2

</link>

. Display first player's name. 

</item>


		

<item id="li1022">
<link id="a1022" target-id="Figure_3">

Figure 3

</link>

. The first player's cards. 

</item>


		

<item id="li1023">
<link id="a1023" target-id="Figure_4">

Figure 4

</link>

. Information about the second player. 

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1024">
<link id="a1024" target-id="Listing_1">

Listing 1

</link>

. Read the file containing the JSON string. 

</item>


		

<item id="li1025">
<link id="a1025" target-id="Listing_2">

Listing 2

</link>

. Display the JSON string. 

</item>


		

<item id="li1026">
<link id="a1026" target-id="Listing_3">

Listing 3

</link>

. Access the game array. 

</item>


		

<item id="li1027">
<link id="a1027" target-id="Listing_4">

Listing 4

</link>

. Get information about the first player. 

</item>


		

<item id="li1028">
<link id="a1028" target-id="Listing_5">

Listing 5

</link>

. Display first player's cards. 

</item>


		

<item id="li1029">
<link id="a1029" target-id="Listing_6">

Listing 6

</link>

. Get and display information about the second player. 

</item>


		

<item id="li1030">
<link id="a1030" target-id="Listing_7">

Listing 7

</link>

. The program named Code.java. 

</item>



	

</list>


	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1004">
You learned how to encode JSON data containing nested arrays and how to write 
the encoded JSON string to an output file in the page titled


<link id="a1031" url="http://cnx.org/contents/5sRB9gpG:6KpbQ6Wn">

Json0225: Encoding JSON Arrays

</link>

. 
The program that I will discuss and explain in the next section will read that 
file from the disk, decode it, and display its component parts.

</para>



	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1005">
The program named 

<emphasis id="strong1002" effect="bold">
Code

</emphasis>
 

<emphasis id="em1004" effect="italics">
(see 

<link id="a1032" target-id="Listing_7">

 Listing 7

</link>

)

</emphasis>
 reads and 
	parses an 
	input file named 

<emphasis id="strong1003" effect="bold">
junk.json

</emphasis>
, The file contains a JSON string 
	with nested array data.

</para>





<section id="h21001">
<title>
<emphasis id="Read_the_file_containing_the_JSON_string" effect="bold">

Read the file containing 
the JSON string

</emphasis>


</title>





<para id="p1006">
I will discuss and explain this program in fragments. The first fragment is 
shown in 

<link id="a1033" target-id="Listing_1">

 Listing 1

</link>

.

</para>







<note id="note1000" type="">



 











<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Read the file containing the JSON string.


<code id="pre1000" display="block">
class Code{

  public static void main(String[] args){
    //Instantiate a JSONObject object, which is a subclass of the
    // Java HashMap class.
    JSONObject jsonMap = null;
    try{
      //Read json string from a file and parse it into a HashMap.
      jsonMap = 
          (JSONObject)(JSONValue.parse(new FileReader("junk.json")));
    }catch(IOException ex){
      ex.printStackTrace();
    }//end catch</code>




</note>















<para id="p1007">
The code in 

<link id="a1034" target-id="Listing_1">

 Listing 1

</link>

 shows the beginning of the class and the beginning of 
the 

<emphasis id="strong1004" effect="bold">
main

</emphasis>
 method. This code reads the JSON string from the input 
file named 

<emphasis id="strong1005" effect="bold">
junk.json

</emphasis>
 and parses the data into an object of type


<emphasis id="strong1006" effect="bold">
JSONObject

</emphasis>
.

</para>





<para id="p1008">
There is nothing new in 

<link id="a1035" target-id="Listing_1">

 Listing 1

</link>

 so the code shouldn't need further 
explanation. When the code in 

<link id="a1036" target-id="Listing_1">

 Listing 1

</link>

 has finished executing, all of the 
information from the JSON string in the file is encapsulated in the object of 
type 

<emphasis id="strong1007" effect="bold">
JSONObject

</emphasis>
 referred to as 

<emphasis id="strong1008" effect="bold">
jsonMap

</emphasis>
.

</para>





</section>
<section id="h21002">
<title>
<emphasis id="Display_the_JSON_string" effect="bold">

Display the JSON string

</emphasis>


</title>




<para id="p1009">
The code in 

<link id="a1037" target-id="Listing_2">

 Listing 2

</link>

 displays the raw JSON string followed by a blank line.

</para>










<note id="note1001" type="">



 











<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Display the JSON string.


<code id="pre1001" display="block">
    System.out.println("json string: " + jsonMap);
    System.out.println();//blank line
    </code>




</note>















<para id="p1010">
This code produces the screen output shown by the screen shot in 

<link id="a1038" target-id="Figure_1">

 Figure 1

</link>

.

</para>





<note id="note1002" type="">



 












<emphasis id="Figure_1" effect="bold">

Figure 1.

</emphasis>

 Screen shot of raw JSON string.


<code id="pre1002" display="block">
json string: {"game":[{"cards":["2-club","3-heart","4-diamond","5-spade"],"name"
:"Tom"},{"cards":["4-heart","5-heart","6-club","7-diamond"],"name":"Joe"}]}
</code>




</note>
















<para id="p1011">
Note that the line break in 

<link id="a1039" target-id="Figure_1">

 Figure 1

</link>

 was inserted by the operating system 
while displaying the string in the command-line window. The line break does not 
exist in the data in the file.

</para>






</section>
<section id="h21003">
<title>
<emphasis id="Access_the_game_array" effect="bold">

Access the game array

</emphasis>


</title>




<para id="p1012">
<link id="a1040" target-id="Listing_3">

 Listing 3

</link>

 calls the 

<emphasis id="strong1009" effect="bold">
get

</emphasis>
 method inherited from the 

<emphasis id="strong1010" effect="bold">
HashMap

</emphasis>
 class to get the game array into an object of type 


<emphasis id="strong1011" effect="bold">
JSONArray

</emphasis>
, which is a 
subclass of the 

<emphasis id="strong1012" effect="bold">
ArrayList

</emphasis>
 class.

</para>









<note id="note1003" type="">



 











<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Access the game array.


<code id="pre1003" display="block">
    JSONArray gameArrayList = (JSONArray)jsonMap.get("game");
</code>




</note>















</section>
<section id="h21004">
<title>
<emphasis id="Get_information_about_the_first_player" effect="bold">

Get information about the 
first player

</emphasis>


</title>




<para id="p1013">
Recall that a 

<emphasis id="strong1013" effect="bold">
JSONArray

</emphasis>
 object is an ordered list as a 
subclass of the 

<emphasis id="strong1014" effect="bold">
ArrayList

</emphasis>
 class. The 

<emphasis id="strong1015" effect="bold">
get

</emphasis>
 method inherited from the 

<emphasis id="strong1016" effect="bold">
ArrayList

</emphasis>
 class 
can be used to access elements in the list on the basis of a zero-based index. 
At this point, information about the first player is stored in the list as an 
object of type 

<emphasis id="strong1017" effect="bold">
JSONObject

</emphasis>
. 

<emphasis id="em1005" effect="italics">
(It is actually stored as type


<emphasis id="strong1018" effect="bold">
Object

</emphasis>
 and must be downcast to type 

<emphasis id="strong1019" effect="bold">
JSONObject

</emphasis>
 in order to do much with it.)

</emphasis>
</para>





<para id="p1014">
<link id="a1041" target-id="Listing_4">

 Listing 4

</link>

 begins by accessing the element at an index value of zero, which is 
the object containing information about the first player.

</para>









<note id="note1004" type="">



 











<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Get information about the first player.


<code id="pre1004" display="block">
    JSONObject firstPlayerMap = (JSONObject)gameArrayList.get(0);
    System.out.println("First Player's Name: " + 
                                         firstPlayerMap.get("name"));
    
</code>




</note>















<para id="p1015">
Then 

<link id="a1042" target-id="Listing_4">

 Listing 4

</link>

 uses the 

<emphasis id="strong1020" effect="bold">
get

</emphasis>
 method inherited from the 


<emphasis id="strong1021" effect="bold">
HashMap

</emphasis>
 class to get and display the value associated with the key "name". 
This produces the screen output shown in 

<link id="a1043" target-id="Figure_2">

 Figure 2

</link>

.

</para>







<note id="note1005" type="">













<emphasis id="Figure_2" effect="bold">

Figure 2.

</emphasis>

 Display first player's name.


<code id="pre1005" display="block">
First Player's Name: Tom
</code>




</note>
















</section>
<section id="h21005">
<title>
<emphasis id="Display_first_players_cards" effect="bold">

Display first player's cards

</emphasis>


</title>





<para id="p1016">
<link id="a1044" target-id="Listing_5">

 Listing 5

</link>

 begins by using the 

<emphasis id="strong1022" effect="bold">
get

</emphasis>
 method of the 

<emphasis id="strong1023" effect="bold">

HashMap

</emphasis>
 class to access the 

<emphasis id="strong1024" effect="bold">
JSONArray

</emphasis>
 object that is 
the value for the key "cards".

</para>










<note id="note1006" type="">



 











<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Display first player's cards.


<code id="pre1006" display="block">
    JSONArray firstPlayerCardsList = 
                              (JSONArray)firstPlayerMap.get("cards");

    System.out.println("First Player's cards");

    Iterator&lt;String&gt; iterator = firstPlayerCardsList.iterator();
    while (iterator.hasNext()) {
      System.out.println(iterator.next());
    }//end while loop
</code>




</note>















<para id="p1017">
Then 

<link id="a1045" target-id="Listing_5">

 Listing 5

</link>

 uses an iterator to iterate through the 

<emphasis id="strong1025" effect="bold">
JSONArray

</emphasis>
 object and 
to display each of the cards in the array, 

<emphasis id="em1006" effect="italics">
(which is actually a list at this 
point)

</emphasis>
. This code produces the output shown in 


<link id="a1046" target-id="Figure_3">

 Figure 3

</link>

.

</para>







<note id="note1007" type="">



 











<emphasis id="Figure_3" effect="bold">

Figure 3.

</emphasis>

 The first player's cards.


<code id="pre1007" display="block">
First Player's cards
2-club
3-heart
4-diamond
5-spade
</code>




</note>
















</section>
<section id="h21006">
<title>
<emphasis id="Get_and_display_information_about_the_second_player" effect="bold">

Get and 
display information about the second player

</emphasis>


</title>





<para id="p1018">
<link id="a1047" target-id="Listing_6">

 Listing 6

</link>

 uses similar code to get and display information about the second 
player.

</para>









<note id="note1008" type="">



 











<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Get and display information about the second 
player.


<code id="pre1008" display="block">
    System.out.println();
    JSONObject secondPlayerMap = (JSONObject)gameArrayList.get(1);
    System.out.println("Second Player's Name: " + 
                                        secondPlayerMap.get("name"));
    
    JSONArray secondPlayerCardsList = 
                             (JSONArray)secondPlayerMap.get("cards");
    System.out.println("Second Player's cards");
    iterator = secondPlayerCardsList.iterator();
    while (iterator.hasNext()) {
      System.out.println(iterator.next());
    }//end while loop

  }//end main

}//end class Code
</code>




</note>















<para id="p1019">
This code produces the screen output shown in 

<link id="a1048" target-id="Figure_4">

 Figure 4

</link>

.

</para>







<note id="note1009" type="">



 











<emphasis id="Figure_4" effect="bold">

Figure 4.

</emphasis>

 Information about the second player.


<code id="pre1009" display="block">
Second Player's Name: Joe
Second Player's cards
4-heart
5-heart
6-club
7-diamond
</code>




</note>
















</section>
<section id="h21007">
<title>
<emphasis id="The_end_of_the_program" effect="bold">

The end of the program

</emphasis>


</title>





<para id="p1020">
<link id="a1049" target-id="Listing_6">

 Listing 6

</link>

 signals the end of the 

<emphasis id="strong1026" effect="bold">
main

</emphasis>
 method and the end of 
the program.

</para>






</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1021">
Click 

<link id="a1050" url="JsonFile.zip">

here

</link>

 to download a zip file containing a 
JSON data file named 

<emphasis id="strong1027" effect="bold">
junk.json

</emphasis>
 that can be used to experiment 
with this program.

</para>





<para id="p1022">
I encourage you to copy the code from 

<link id="a1051" target-id="Listing_7">

 Listing 7

</link>

. Execute the code and confirm 
that you get the same results as those shown in 

<link id="a1052" target-id="Figure_1">

 Figure 1

</link>

 through 

<link id="a1053" target-id="Figure_4">

 Figure 4

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>






</section>
<section id="h11005">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1023">
A complete listing of the program named 

<emphasis id="strong1028" effect="bold">
Code

</emphasis>
 is provided in 

<link id="a1054" target-id="Listing_7">

 Listing 7

</link>

.

</para>











<note id="note1010" type="">















<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. The program named Code.java.


<code id="pre1010" display="block">
/********************************************************************
Copyright: R.G.Baldwin 2016
Revised: 06/01/16

Reads a json string from a file, parses, and 
displays some of its parts.

Tested with Java 8, Windows 7, and 
json-simple-1.1.1.
********************************************************************/

import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import org.json.simple.JSONValue;
import java.io.IOException;
import java.io.FileReader;
import java.util.*;

class Code{

  public static void main(String[] args){
    //Instantiate a JSONObject object, which is a subclass of the
    // Java HashMap class.
    JSONObject jsonMap = null;
    try{
      //Read json string from a file and parse it into a HashMap.
      jsonMap = 
          (JSONObject)(JSONValue.parse(new FileReader("junk.json")));
    }catch(IOException ex){
      ex.printStackTrace();
    }//end catch

    //Get and display the json string
    System.out.println("json string: " + jsonMap);
    System.out.println();//blank line

    //Get the game array into an ArrayList object.
    JSONArray gameArrayList = (JSONArray)jsonMap.get("game");
    
    //Get and display info about the first player.
    JSONObject firstPlayerMap = (JSONObject)gameArrayList.get(0);
    System.out.println("First Player's Name: " + 
                                         firstPlayerMap.get("name"));
    
    JSONArray firstPlayerCardsList = 
                              (JSONArray)firstPlayerMap.get("cards");
    System.out.println("First Player's cards");
    Iterator&lt;String&gt; iterator = firstPlayerCardsList.iterator();
    while (iterator.hasNext()) {
      System.out.println(iterator.next());
    }//end while loop

    //Get and display info about the second player.
    System.out.println();
    JSONObject secondPlayerMap = (JSONObject)gameArrayList.get(1);
    System.out.println("Second Player's Name: " + 
                                        secondPlayerMap.get("name"));
    
    JSONArray secondPlayerCardsList = 
                             (JSONArray)secondPlayerMap.get("cards");
    System.out.println("Second Player's cards");
    iterator = secondPlayerCardsList.iterator();
    while (iterator.hasNext()) {
      System.out.println(iterator.next());
    }//end while loop

  }//end main

}//end class Code

</code>




</note>















	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1024">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1011" type="">


		


			


				

<emphasis id="strong1029" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1007" list-type="bulleted">

					

<item id="li1031">
Module name: Json0230: Decoding JSON Arrays

</item>


					

<item id="li1032">
File: Json0230.htm

</item>


					

<item id="li1033">
Published: 06/01/16

</item>



				

</list>



				

</note>





	

<note id="note1012" type="">


		


			


				

<emphasis id="strong1030" effect="bold">
Disclaimers:

</emphasis>
<para id="p1025">
<emphasis id="strong1031" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1026">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1027">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1028">
<emphasis id="strong1032" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>




</note>



	


<para id="p1029">
-end- 

</para>







</section>
</content>




</document>