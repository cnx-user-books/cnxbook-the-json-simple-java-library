<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Json0220: Decoding JSON Strings</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m61725</md:content-id>
  <md:title>Json0220: Decoding JSON Strings</md:title>
  <md:abstract>Learn to decode JSON strings using the parse methods of the JSONValue and JSONParser classes.</md:abstract>
  <md:uuid>18721956-5705-46d4-9767-20d9440ff4f5</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Thu Jun 02 19:25:56 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

        

<item id="li1000">

        

<link id="a1000" url="http://cnx.org/contents/5sRB9gpG">


<emphasis id="em1001" effect="italics">
The json-simple Java Library

</emphasis>
</link>

.

</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/yWyT-uhM">


<emphasis id="em1002" effect="italics">
INEW2338 - Advanced Java Programming

</emphasis>
</link>


</item>


	

<item id="li1002">

	

<link id="a1002" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1003" effect="italics">
Object-Oriented Programming (OOP) with Java

</emphasis>
</link>


</item>




</list>














<section id="h11000">
<title>
<emphasis id="Table_of_contents" effect="bold">

Table of contents

</emphasis>


</title>







<list id="ul1001" list-type="bulleted">
<item id="li1003">
<link id="a1003" target-id="Table_of_contents">

Table of contents

</link>




</item>


<item id="li1004">
<link id="a1004" target-id="Preface">

Preface

</link>




<list id="ul1002" list-type="bulleted">
<item id="li1005">
<link id="a1005" target-id="Viewing_tip">

Viewing tip

</link>




<list id="ul1003" list-type="bulleted">
<item id="li1006">
<link id="a1006" target-id="Figures">

Figures

</link>




</item>


<item id="li1007">
<link id="a1007" target-id="Listings">

Listings

</link>




</item>


</list>


</item>


</list>


</item>


<item id="li1008">
<link id="a1008" target-id="General_background_information">

General 
	background information

</link>




</item>


<item id="li1009">
<link id="a1009" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>




<list id="ul1004" list-type="bulleted">
<item id="li1010">
<link id="a1010" target-id="Decode_and_display_using_the_JSONValue_class">

Decode and display 
using the JSONValue class

</link>




</item>


<item id="li1011">
<link id="a1011" target-id="The_method_named_decodeC">

The method named decodeC

</link>




</item>


<item id="li1012">
<link id="a1012" target-id="Display_contents_of_JSONObject_objects">

Display contents of 
JSONObject objects

</link>




</item>


<item id="li1013">
<link id="a1013" target-id="Decode_and_display_using_the_JSONParser_class">

Decode and display using the JSONParser class

</link>




</item>


<item id="li1014">
<link id="a1014" target-id="The_method_named_decodeD">

The method named decodeD

</link>




</item>


<item id="li1015">
<link id="a1015" target-id="The_end_of_the_program">

The end of the program

</link>




</item>


</list>


</item>


<item id="li1016">
<link id="a1016" target-id="Run_the_program">

Run the program

</link>




</item>


<item id="li1017">
<link id="a1017" target-id="Complete_program_listings">

Complete program listing

</link>




</item>


<item id="li1018">
<link id="a1018" target-id="Miscellaneous">

Miscellaneous

</link>




</item>


</list>




	

</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This is a page from the book titled 

<emphasis id="strong1000" effect="bold">
The json-simple Java Library

</emphasis>
. The book explains how to use the 
	

<emphasis id="strong1001" effect="bold">
json-simple

</emphasis>
 Java library to generate, transform, and query 
	JSON text. This page explains how to decode JSON strings using the parse 
	methods of the 

<emphasis id="strong1002" effect="bold">
JSONValue

</emphasis>
 and 

<emphasis id="strong1003" effect="bold">
JSONParser

</emphasis>
 classes.

</para>



	
	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1019">
<link id="a1019" target-id="Figure_1">

Figure 1

</link>

. Program output. 

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1020">
<link id="a1020" target-id="Listing_1">

Listing 1

</link>

. Decode and display using the JSONValue class. 

</item>


		

<item id="li1021">
<link id="a1021" target-id="Listing_2">

Listing 2

</link>

. The method named decodeC. 

</item>


		

<item id="li1022">
<link id="a1022" target-id="Listing_3">

Listing 3

</link>

. The display method. 

</item>


		

<item id="li1023">
<link id="a1023" target-id="Listing_4">

Listing 4

</link>

. Decode and display using the JSONParser class. 

</item>


		

<item id="li1024">
<link id="a1024" target-id="Listing_5">

Listing 5

</link>

. The method named decodeD. 

</item>


		

<item id="li1025">
<link id="a1025" target-id="Listing_6">

Listing 6

</link>

. The program named Code.java. 

</item>



	

</list>



	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1004">
As mentioned in the 

<link id="a1026" target-id="Preface">

Preface

</link>

, this page deals with the 
classes named 

<emphasis id="strong1004" effect="bold">
JSONValue

</emphasis>
 and 

<emphasis id="strong1005" effect="bold">
JSONParser

</emphasis>
. 
Each of these classes extends the 

<emphasis id="strong1006" effect="bold">
Object

</emphasis>
 class and provides 
various methods for processing JSON data. The page also exposes you to the class 
named 

<emphasis id="strong1007" effect="bold">
ParseException

</emphasis>
.

</para>





<para id="p1005">
All of the methods in the 

<emphasis id="strong1008" effect="bold">
JSONValue

</emphasis>
 class are 

<emphasis id="strong1009" effect="bold">
static

</emphasis>
 
methods. Methods in this class are available to deal with JSON input data in 
both the string format and the 

<emphasis id="strong1010" effect="bold">
JSONObject

</emphasis>
 format.

</para>





<para id="p1006">
None of the methods in the 

<emphasis id="strong1011" effect="bold">
JSONParser

</emphasis>
 class are static 
methods. In general the methods in this class are designed to deal only with 
input data in the string format.

</para>





<para id="p1007">
Both classes provide several overloaded 

<emphasis id="strong1012" effect="bold">
parse

</emphasis>
 methods that 
can be used to parse input JSON text from different sources into the 

<emphasis id="strong1013" effect="bold">

JSONObject

</emphasis>
 format.

</para>





<para id="p1008">
The sample program that follows will use the 

<emphasis id="strong1014" effect="bold">
parse

</emphasis>
 method 
from both classes to parse JSON strings into 

<emphasis id="strong1015" effect="bold">
JSONObject

</emphasis>
 
objects.

</para>



	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1009">
The program named 

<emphasis id="strong1016" effect="bold">
Code

</emphasis>
 

<emphasis id="em1004" effect="italics">
(see 

<link id="a1027" target-id="Listing_6">

 Listing 6

</link>

)

</emphasis>
 
	consists of some old code and some new code. The program begins just like the 
	program that I explained in the earlier page titled
	

<link id="a1028" url="http://cnx.org/contents/5sRB9gpG:16t-k2Np">

Json0215: Encoding JSON Strings

</link>

. 
	The beginning portion of the program is used solely to create JSON data in 
	string format and to store the individual strings as elements in an 

<emphasis id="strong1017" effect="bold">

	ArrayList

</emphasis>
 object. 

</para>





<para id="p1010">
This code constructs three 

<emphasis id="strong1018" effect="bold">
JSONObject

</emphasis>
 objects and saves them in an
	

<emphasis id="strong1019" effect="bold">
ArrayList

</emphasis>
 object. Then it transforms each 

<emphasis id="strong1020" effect="bold">
JSONObject

</emphasis>
 object into a
	

<emphasis id="strong1021" effect="bold">
String

</emphasis>
 object and saves the strings in a second 

<emphasis id="strong1022" effect="bold">
ArrayList

</emphasis>
 object.
	The new code decodes the strings into 

<emphasis id="strong1023" effect="bold">
JSONObject

</emphasis>
 objects using 
	a 

<emphasis id="strong1024" effect="bold">
parse

</emphasis>
 method from the 

<emphasis id="strong1025" effect="bold">
JSONValue

</emphasis>
 class 
	and saves them in a third 

<emphasis id="strong1026" effect="bold">
ArrayList

</emphasis>
 object.

</para>





<para id="p1011">
Then the new code decodes the strings into 

<emphasis id="strong1027" effect="bold">
JSONObject

</emphasis>
 
objects using a 

<emphasis id="strong1028" effect="bold">
parse

</emphasis>
 method from the 

<emphasis id="strong1029" effect="bold">
JSONParser

</emphasis>
 class and saves them in a fourth


<emphasis id="strong1030" effect="bold">
ArrayList

</emphasis>
 object.

</para>





<para id="p1012">
The contents of both lists of 

<emphasis id="strong1031" effect="bold">
JSONObject

</emphasis>
 objects are 
displayed on the computer screen after they are populated with decoded data from 
the JSON strings.

</para>






<section id="h21001">
<title>
<emphasis id="Decode_and_display_using_the_JSONValue_class" effect="bold">

Decode and display 
using the JSONValue class

</emphasis>


</title>





<para id="p1013">
I will explain this program in fragments, and will begin at the point 
where the new code begins. The first fragment is shown in 

<link id="a1029" target-id="Listing_1">

 Listing 1

</link>

.

</para>







<note id="note1000" type="">



 











<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Decode and display using the JSONValue class.


<code id="pre1000" display="block">
    //Create a container for decoded JSON strings.
    ArrayList &lt;JSONObject&gt; listC = new ArrayList&lt;JSONObject&gt;();

    //Decode and display JSON strings using the parse method of the
    // JSONValue class
    System.out.println("Decode using JSONValue class");
    decodeC(listB,listC);
    display(listC);
    System.out.println();//blank line
    </code>




</note>















<para id="p1014">
Immediately prior to the code in 

<link id="a1030" target-id="Listing_1">

 Listing 1

</link>

, three JSON strings are stored as 
elements in an 

<emphasis id="strong1032" effect="bold">
ArrayList

</emphasis>
 object referred to as 

<emphasis id="strong1033" effect="bold">
listB

</emphasis>
.

</para>





<para id="p1015">
<link id="a1031" target-id="Listing_1">

 Listing 1

</link>

 begins by instantiating a new 

<emphasis id="strong1034" effect="bold">
ArrayList

</emphasis>
 object, 
referred to as 

<emphasis id="strong1035" effect="bold">
listC

</emphasis>
 that will receive the decoded versions of 
the JSON strings as type 

<emphasis id="strong1036" effect="bold">
JSONObject

</emphasis>
 objects. Then 

<link id="a1032" target-id="Listing_1">

 Listing 1

</link>

 
calls the method named 

<emphasis id="strong1037" effect="bold">
decodeC

</emphasis>
 passing the list of JSON strings 
and the empty list as parameters.

</para>





</section>
<section id="h21002">
<title>
<emphasis id="The_method_named_decodeC" effect="bold">

The method named decodeC

</emphasis>


</title>




<para id="p1016">
The method named 

<emphasis id="strong1038" effect="bold">
decodeC

</emphasis>
 is shown in its entirety in 


<link id="a1033" target-id="Listing_2">

 Listing 2

</link>

.

</para>









<note id="note1001" type="">



 











<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. The method named decodeC.


<code id="pre1001" display="block">
  static void decodeC(ArrayList input,ArrayList output){
    String temp = null;
    Iterator&lt;String&gt; iterator = input.iterator();
    while (iterator.hasNext()){
      temp = iterator.next();
      output.add(JSONValue.parse(temp));
    }//end while loop
  }//end decodeC
  </code>




</note>















<para id="p1017">
This method decodes a list of JSON strings into 

<emphasis id="strong1039" effect="bold">
JSONObject

</emphasis>
 
objects using a static 

<emphasis id="strong1040" effect="bold">
parse

</emphasis>
 method of the 

<emphasis id="strong1041" effect="bold">
JSONValue

</emphasis>
 
class. The resulting 

<emphasis id="strong1042" effect="bold">
JSONObject

</emphasis>
 objects are added to the empty


<emphasis id="strong1043" effect="bold">
ArrayList

</emphasis>
 object received as an incoming parameter. When the 
method returns, that list contains one 

<emphasis id="strong1044" effect="bold">
JSONObject

</emphasis>
 object for 
each JSON string contained in the incoming 

<emphasis id="strong1045" effect="bold">
ArrayList

</emphasis>
 object.

</para>





</section>
<section id="h21003">
<title>
<emphasis id="Display_contents_of_JSONObject_objects" effect="bold">

Display contents of 
JSONObject objects

</emphasis>


</title>




<para id="p1018">
Returning now to the code in 

<link id="a1034" target-id="Listing_1">

 Listing 1

</link>

, the next statement calls the 

<emphasis id="strong1046" effect="bold">

display

</emphasis>
 method passing the now-populated 

<emphasis id="strong1047" effect="bold">
listC

</emphasis>
 as a 
parameter. At this point, the 

<emphasis id="strong1048" effect="bold">
JSONObject

</emphasis>
 objects stored in


<emphasis id="strong1049" effect="bold">
listC

</emphasis>
 contain the information that was extracted from the JSON 
strings by the 

<emphasis id="strong1050" effect="bold">
parse

</emphasis>
 method of the 

<emphasis id="strong1051" effect="bold">
JSONValue

</emphasis>
 
class.

</para>





<para id="p1019">
The 

<emphasis id="strong1052" effect="bold">
display

</emphasis>
 method is shown in its entirety in 

<link id="a1035" target-id="Listing_3">

 Listing 3

</link>

.

</para>






<note id="note1002" type="">



 











<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. The display method.


<code id="pre1002" display="block">
  static void display(ArrayList input){
    JSONObject temp = null;
    Iterator&lt;JSONObject&gt; iterator = input.iterator();
    while (iterator.hasNext()){
      temp = iterator.next();
      System.out.print("Name: " + temp.get("name"));
      System.out.print("  Age: " + temp.get("age"));
      System.out.println("  Is student? " + temp.get("student"));
    }//end while loop
  }//end display
  </code>




</note>















<para id="p1020">
This method uses the 

<emphasis id="strong1053" effect="bold">
get

</emphasis>
 method inherited from the 

<emphasis id="strong1054" effect="bold">

HashMap

</emphasis>
 class to get and display the values in a list of 

<emphasis id="strong1055" effect="bold">

JSONObject

</emphasis>
 objects for a known set of keys. This is plain-vanilla Java 
code and shouldn't require further explanation. The results of this call to the


<emphasis id="strong1056" effect="bold">
display

</emphasis>
 method are shown in the top 
half of 

<link id="a1036" target-id="Figure_1">

 Figure 1

</link>

.

</para>






<note id="note1003" type="">



 












<emphasis id="Figure_1" effect="bold">

Figure 1.

</emphasis>

 Program output.


<code id="pre1003" display="block">Decode using JSONValue class
Name: Joe Age: 21 Is student? true
Name: Sue Age: 32 Is student? false
Name: Tom Age: 19 Is student? true

Decode using JSONParser class
Name: Joe Age: 21 Is student? true
Name: Sue Age: 32 Is student? false
Name: Tom Age: 19 Is student? true
</code>




</note>
















<para id="p1021">
The contents of the JSON strings for this same data were displayed in


<link id="a1037" url="http://cnx.org/contents/5sRB9gpG:16t-k2Np#Figure_1">

Figure 1

</link>

 of the 
earlier page titled
	

<link id="a1038" url="http://cnx.org/contents/5sRB9gpG:16t-k2Np">

Json0215: Encoding JSON Strings

</link>

. 


</para>





<para id="p1022">
If you compare the output in the top half of 

<link id="a1039" target-id="Figure_1">

 Figure 1

</link>

 above with the JSON string 
data on the earlier page, you will see that they match.

</para>






<note id="note1004" type="">





<para id="p1023">

You could also make the comparison with the data in the code in the early 
portion of 

<link id="a1040" target-id="Listing_6">

 Listing 6

</link>

. 

</para>





</note>



	



</section>
<section id="h21004">
<title>
<emphasis id="Decode_and_display_using_the_JSONParser_class" effect="bold">

Decode and display using the JSONParser class

</emphasis>


</title>





<para id="p1024">
Returning to the 

<emphasis id="strong1057" effect="bold">
main

</emphasis>
 method, the code in 

<link id="a1041" target-id="Listing_4">

 Listing 4

</link>

 calls 
the 

<emphasis id="strong1058" effect="bold">
decodeD

</emphasis>
 method passing the list of JSON strings along with 
an empty 

<emphasis id="strong1059" effect="bold">
ArrayList

</emphasis>
 object for the purpose of decoding the JSON 
strings using a 

<emphasis id="strong1060" effect="bold">
parse

</emphasis>
 method of the 

<emphasis id="strong1061" effect="bold">
JSONParser

</emphasis>
 
class.

</para>









<note id="note1005" type="">



 











<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Decode and display using the JSONParser class.


<code id="pre1004" display="block">
    //Create another container for decoded JSON strings.
    ArrayList &lt;JSONObject&gt; listD = new ArrayList&lt;JSONObject&gt;();
    
    //Decode and display JSON strings using the parse method of the
    // JSONParser class
    System.out.println("Decode using JSONParser class");
    decodeD(listB,listD);
    display(listD);
    System.out.println();//blank line

  }//end main</code>




</note>















<para id="p1025">
Then the code in 

<link id="a1042" target-id="Listing_4">

 Listing 4

</link>

 calls the 

<emphasis id="strong1062" effect="bold">
display

</emphasis>
 method to 
display the results, producing the text in the bottom half of 

<link id="a1043" target-id="Figure_1">

 Figure 1

</link>

.

</para>





<para id="p1026">
As you can see, the results in the top and bottom halves of 

<link id="a1044" target-id="Figure_1">

 Figure 1

</link>

 match, 
indicating that both approaches produced the same results.

</para>





</section>
<section id="h21005">
<title>
<emphasis id="The_method_named_decodeD" effect="bold">

The method named decodeD

</emphasis>


</title>




<para id="p1027">
The method named decodeD is shown in its entirety in 

<link id="a1045" target-id="Listing_5">

 Listing 5

</link>

.

</para>









<note id="note1006" type="">



 











<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. The method named decodeD.


<code id="pre1005" display="block">
  static void decodeD(ArrayList input,ArrayList output){
    JSONParser parser = new JSONParser();
    String temp = null;
    Iterator&lt;String&gt; iterator = input.iterator();
    while (iterator.hasNext()){
      temp = iterator.next();
      try{
        //ParseException; must be caught or declared to be thrown.
        output.add(parser.parse(temp));
      }catch(ParseException pex){
        pex.printStackTrace();
      }//end catch
    }//end while loop
  }//end decodeD</code>




</note>















<para id="p1028">
This method decodes a list of JSON strings into 

<emphasis id="strong1063" effect="bold">
JSONObject

</emphasis>
 
objects using a 

<emphasis id="strong1064" effect="bold">
parse

</emphasis>
 method of the 

<emphasis id="strong1065" effect="bold">
JSONParser

</emphasis>
 
class. This code is only slightly more complicated than the code shown earlier 
in 

<link id="a1046" target-id="Listing_2">

 Listing 2

</link>

 that uses a 

<emphasis id="strong1066" effect="bold">
parse

</emphasis>
 method of the 

<emphasis id="strong1067" effect="bold">
JSONValue

</emphasis>
 
class. 

</para>





<para id="p1029">
The additional complexity is due mainly to the fact that the 

<emphasis id="strong1068" effect="bold">
parse

</emphasis>
 
method throws a 

<emphasis id="em1005" effect="italics">
checked

</emphasis>
 exception named 

<emphasis id="strong1069" effect="bold">
ParseException

</emphasis>
. 
Because it is a checked exception, it must either be caught or declared to be 
thrown by the method. I elected to catch it in this program and to simply call 
the 

<emphasis id="strong1070" effect="bold">
printStackTrace

</emphasis>
 method 

<emphasis id="em1006" effect="italics">
(inherited from the 

<emphasis id="strong1071" effect="bold">

Throwable

</emphasis>
 class)

</emphasis>
 in the catch block. However, the 

<emphasis id="strong1072" effect="bold">

ParseException

</emphasis>
 class provides some other methods that can be called to 
elaborate on the nature of the error if desired.

</para>





</section>
<section id="h21006">
<title>
<emphasis id="The_end_of_the_program" effect="bold">

The end of the program

</emphasis>


</title>




<para id="p1030">
Returning to the 

<emphasis id="strong1073" effect="bold">
main

</emphasis>
 method in 

<link id="a1047" target-id="Listing_4">

 Listing 4

</link>

, there is nothing more to do, so 
the last line in 

<link id="a1048" target-id="Listing_4">

 Listing 4

</link>

 signals the end of the program.

</para>







</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1031">
I encourage you to copy the code from 

<link id="a1049" target-id="Listing_6">

 Listing 6

</link>

. Execute the code and confirm 
that you get the same results as those shown in 

<link id="a1050" target-id="Figure_1">

 Figure 1

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>





</section>
<section id="h11005">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1032">
A complete listing of the program named 

<emphasis id="strong1074" effect="bold">
Code

</emphasis>
 is provided in 


<link id="a1051" target-id="Listing_6">

 Listing 6

</link>

.

</para>










<note id="note1007" type="">















<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. The program 
named Code.java.


<code id="pre1006" display="block">
/********************************************************************
Copyright 2016 R.G.Baldwin

OLD CODE:
Constructs three JSONObject objects and saves them in an ArrayList.
Transforms each JSONObject object into a String object and saves the
 strings in a second ArrayList object.
 
NEW CODE:
Decodes the strings into JSONObjects using the JSONValue parse method
 and saves them in a third ArrayList object.
Decodes the strings into JSONObjects using the JSONParser class
 and saves them in a fourth ArrayList object.
Displays both sets of decoded JSON strings.

Tested with Java 8, Win 7, and json-simple-1.1.1.jar.
********************************************************************/

import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.util.ArrayList;
import java.util.Iterator;

class Code {

  public static void main(String[] args){
    //OLD CODE:
    //Create a container for several JSON objects.
    ArrayList &lt;JSONObject&gt; listA = new ArrayList&lt;JSONObject&gt;();
    //Create a container for several JSON strings
    ArrayList &lt;String&gt; listB = new ArrayList&lt;String&gt;();
    
    //Create and populate the first JSONObject with unordered
    // key/value pairs.
    listA.add(new JSONObject());
    listA.get(0).put("name","Joe");
    listA.get(0).put("age",21);
    listA.get(0).put("student",true);
    
    //Create and populate the second JSONObject. Note that the object
    // is populated in a different order than above.
    listA.add(new JSONObject());
    listA.get(1).put("student",false);
    listA.get(1).put("name","Sue");
    listA.get(1).put("age",32);

    
    //Create and populate the third JSONObject
    listA.add(new JSONObject());
    listA.get(2).put("name","Tom");
    listA.get(2).put("age",19);
    listA.get(2).put("student",true);

    //Transform the three JSON objects into JSON strings and save
    // them in ListB. Could write them to disk for transfer to a
    // different programming environment at this point.
    Iterator&lt;JSONObject&gt; iteratorA = listA.iterator();
    while (iteratorA.hasNext()){
      listB.add(iteratorA.next().toJSONString());
    }//end while loop

    //NEW CODE BEGINS HERE
    
    //Create a container for decoded JSON strings.
    ArrayList &lt;JSONObject&gt; listC = new ArrayList&lt;JSONObject&gt;();

    //Decode and display JSON strings using the parse method of the
    // JSONValue class
    System.out.println("Decode using JSONValue class");
    decodeC(listB,listC);
    display(listC);
    System.out.println();//blank line
    
    //Create another container for decoded JSON strings.
    ArrayList &lt;JSONObject&gt; listD = new ArrayList&lt;JSONObject&gt;();
    
    //Decode and display JSON strings using the parse method of the
    // JSONParser class
    System.out.println("Decode using JSONParser class");
    decodeD(listB,listD);
    display(listD);
    System.out.println();//blank line

  }//end main
  //---------------------------------------------------------------//
 
  //Decode a list of JSON strings into JSONObject objects using the
  // parse method of the JSONValue class
  static void decodeC(ArrayList input,ArrayList output){
    String temp = null;
    Iterator&lt;String&gt; iterator = input.iterator();
    while (iterator.hasNext()){
      temp = iterator.next();
      output.add(JSONValue.parse(temp));
    }//end while loop
  }//end decodeC
  //---------------------------------------------------------------//
 
  //Decode a list of JSON strings into JSONObject objects using the
  // parse method of the JSONParser class
  static void decodeD(ArrayList input,ArrayList output){
    JSONParser parser = new JSONParser();
    String temp = null;
    Iterator&lt;String&gt; iterator = input.iterator();
    while (iterator.hasNext()){
      temp = iterator.next();
      try{
        //ParseException; must be caught or declared to be thrown.
        output.add(parser.parse(temp));
      }catch(ParseException pex){
        pex.printStackTrace();
      }//end catch
    }//end while loop
  }//end decodeD
  //---------------------------------------------------------------//
  
  //Display the values in a list of JSONObject objects for a known
  // set of keys.
  static void display(ArrayList input){
    JSONObject temp = null;
    Iterator&lt;JSONObject&gt; iterator = input.iterator();
    while (iterator.hasNext()){
      temp = iterator.next();
      System.out.print("Name: " + temp.get("name"));
      System.out.print("  Age: " + temp.get("age"));
      System.out.println("  Is student? " + temp.get("student"));
    }//end while loop
  }//end display
  //---------------------------------------------------------------//
}//end class Code

</code>




</note>















	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1033">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1008" type="">


		


			


				

<emphasis id="strong1075" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1007" list-type="bulleted">

					

<item id="li1026">
Module name: Json0220: Decoding JSON Strings

</item>


					

<item id="li1027">
File: Json0220.htm

</item>


					

<item id="li1028">
Published: 05/31/16

</item>



				

</list>



				

</note>





	

<note id="note1009" type="">


		


			


				

<emphasis id="strong1076" effect="bold">
Disclaimers:

</emphasis>
<para id="p1034">
<emphasis id="strong1077" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1035">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1036">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1037">
<emphasis id="strong1078" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>




</note>



	


<para id="p1038">
-end- 

</para>







</section>
</content>




</document>