<document xmlns="http://cnx.rice.edu/cnxml"> 
<title>Json0225: Encoding JSON Arrays</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m61731</md:content-id>
  <md:title>Json0225: Encoding JSON Arrays</md:title>
  <md:abstract>Learn how to encode JSON array data using the JSONArray class. Also learn how to write an encoded JSON string to an output text file for transport to a different computing environment.</md:abstract>
  <md:uuid>e8aa5b43-a5a7-48e2-aa83-ab25b849860a</md:uuid>
</metadata>

<content>






<para id="p1000">
Revised: Thu Jun 02 19:27:08 CDT 2016

</para>




<para id="p1001">
<emphasis id="em1000" effect="italics">
This page is included in the following Books:

</emphasis>
</para>




<list id="ul1000" list-type="bulleted">

        

<item id="li1000">

        

<link id="a1000" url="http://cnx.org/contents/5sRB9gpG">


<emphasis id="em1001" effect="italics">
The json-simple Java Library

</emphasis>
</link>

.

</item>


	

<item id="li1001">

	

<link id="a1001" url="http://cnx.org/contents/yWyT-uhM">


<emphasis id="em1002" effect="italics">
INEW2338 - Advanced Java Programming

</emphasis>
</link>


</item>


	

<item id="li1002">

	

<link id="a1002" url="http://cnx.org/contents/-2RmHFs_">


<emphasis id="em1003" effect="italics">
Object-Oriented Programming (OOP) with Java

</emphasis>
</link>


</item>




</list>














<section id="h11000">
<title>
<emphasis id="Table_of_contents" effect="bold">

Table of contents

</emphasis>


</title>







<list id="ul1001" list-type="bulleted">
<item id="li1003">
<link id="a1003" target-id="Table_of_contents">

Table of contents

</link>




</item>


<item id="li1004">
<link id="a1004" target-id="Preface">

Preface

</link>




<list id="ul1002" list-type="bulleted">
<item id="li1005">
<link id="a1005" target-id="Viewing_tip">

Viewing tip

</link>




<list id="ul1003" list-type="bulleted">
<item id="li1006">
<link id="a1006" target-id="Figures">

Figures

</link>




</item>


<item id="li1007">
<link id="a1007" target-id="Listings">

Listings

</link>




</item>


</list>


</item>


</list>


</item>


<item id="li1008">
<link id="a1008" target-id="General_background_information">

General 
	background information

</link>




</item>


<item id="li1009">
<link id="a1009" target-id="Discussion_and_sample_code">

Discussion and sample code

</link>




<list id="ul1004" list-type="bulleted">
<item id="li1010">
<link id="a1010" target-id="Beginning_of_the_class_and_the_main_method">

Beginning of the class 
and the main method

</link>




</item>


<item id="li1011">
<link id="a1011" target-id="Instantiate_and_populate_a_JSONArray_object">

Instantiate and 
populate a JSONArray object

</link>




</item>


<item id="li1012">
<link id="a1012" target-id="Populate_hashMapA_with_akeyValue_pair">

Populate hashMapA with a 
key/value pair

</link>




</item>


<item id="li1013">
<link id="a1013" target-id="Create_and_populate_another_similar_JSON_object">

Create and 
populate another similar JSON object

</link>




</item>


<item id="li1014">
<link id="a1014" target-id="Put_the_players_in_the_game">

Put the players in the game

</link>




</item>


<item id="li1015">
<link id="a1015" target-id="Write_the_JSON_string_to_an_output_file">

Write the JSON string to 
an output file

</link>




</item>


<item id="li1016">
<link id="a1016" target-id="The_end_of_the_program">

The end of the program

</link>




</item>


<item id="li1017">
<link id="a1017" target-id="The_contents_of_the_output_file">

The contents of the output file

</link>




</item>


<item id="li1018">
<link id="a1018" target-id="Decoded_output_data">

Decoded output data

</link>




</item>


</list>


</item>


<item id="li1019">
<link id="a1019" target-id="Run_the_program">

Run the program

</link>




</item>


<item id="li1020">
<link id="a1020" target-id="Complete_program_listings">

Complete program listing

</link>




</item>


<item id="li1021">
<link id="a1021" target-id="Miscellaneous">

Miscellaneous

</link>




</item>


</list>






</section>
<section id="h11001">
<title>
<emphasis id="Preface" effect="bold">

Preface

</emphasis>


</title>


	
	

<para id="p1002">
This is a page from the book titled 

<emphasis id="strong1000" effect="bold">
The json-simple Java Library

</emphasis>
. The book explains how to use the 
	

<emphasis id="strong1001" effect="bold">
json-simple

</emphasis>
 Java library to generate, transform, and query 
	JSON text. This page explains how to encode JSON array data using the
	

<emphasis id="strong1002" effect="bold">
JSONArray

</emphasis>
 class. It also shows how to write an encoded JSON 
	string to an output text file for transport to a different programming 
	environment.

</para>



	
	

<section id="h21000">
<title>
<emphasis id="Viewing_tip" effect="bold">

Viewing tip

</emphasis>


</title>


	

<para id="p1003">
I recommend that you open another copy of this module in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.

</para>



	

<section id="h31000">
<title>
<emphasis id="Figures" effect="bold">

Figures

</emphasis>


</title>


	

<list id="ul1005" list-type="bulleted">

		

<item id="li1022">
<link id="a1022" target-id="Figure_1">

Figure 1

</link>

. Prettified version of output file contents.

</item>


		

<item id="li1023">
<link id="a1023" target-id="Figure_2">

Figure 2

</link>

. Beginning of output file contents. 

</item>


		

<item id="li1024">
<link id="a1024" target-id="Figure_3">

Figure 3

</link>

. Decoded output data. 

</item>



	

</list>


	

</section>
<section id="h31001">
<title>
<emphasis id="Listings" effect="bold">

Listings

</emphasis>


</title>


	

<list id="ul1006" list-type="bulleted">

		

<item id="li1025">
<link id="a1025" target-id="Listing_1">

Listing 1

</link>

. Beginning of the class and the main method. 

</item>


		

<item id="li1026">
<link id="a1026" target-id="Listing_2">

Listing 2

</link>

. Instantiate and populate a JSONArray object.

</item>


		

<item id="li1027">
<link id="a1027" target-id="Listing_3">

Listing 3

</link>

. Populate hashMapA. 

</item>


		

<item id="li1028">
<link id="a1028" target-id="Listing_4">

Listing 4

</link>

. Create and populate another similar JSON object. 

</item>


		

<item id="li1029">
<link id="a1029" target-id="Listing_5">

Listing 5

</link>

. Put the players in the game. 

</item>


		

<item id="li1030">
<link id="a1030" target-id="Listing_6">

Listing 6

</link>

. Write the JSON string to an output file. 

</item>


		

<item id="li1031">
<link id="a1031" target-id="Listing_7">

Listing 7

</link>

. The program named Code.java. 

</item>



	

</list>



	

</section>
</section>
</section>
<section id="h11002">
<title>
<emphasis id="General_background_information" effect="bold">

General 
	background information

</emphasis>


</title>




<para id="p1004">
As you learned in the page titled 


<link id="a1032" url="http://cnx.org/contents/5sRB9gpG:_u3ZKIdD">

Json0210: Structure of the json-simple Java Library

</link>

, the 


<emphasis id="strong1003" effect="bold">
JSONArray

</emphasis>
 class extends the 
standard Java 

<emphasis id="strong1004" effect="bold">
ArrayList

</emphasis>
 class. Once you have an object of the


<emphasis id="strong1005" effect="bold">
JSONArray

</emphasis>
 class, you have access to all of the methods defined 
in and inherited into the 

<emphasis id="strong1006" effect="bold">
JSONArray

</emphasis>
 class.

</para>





<para id="p1005">
The sample program that follows will use the 

<emphasis id="strong1007" effect="bold">
JSONArray

</emphasis>
 class 
to construct a JSON string containing nested arrays and will then write the 
string to an output file suitable for transport to a different programming 
environment.

</para>





<para id="p1006">
A later page in this book will read the JSON string from the file and decode 
it into its component parts.

</para>



	
	

</section>
<section id="h11003">
<title>
<emphasis id="Discussion_and_sample_code" effect="bold">

Discussion and sample code

</emphasis>


</title>


	
	

<para id="p1007">
The program named 

<emphasis id="strong1008" effect="bold">
Code

</emphasis>
 

<emphasis id="em1004" effect="italics">
(see 

<link id="a1033" target-id="Listing_7">

 Listing 7

</link>

)

</emphasis>
 creates a 
	JSON string and writes it to an output file. The 

<emphasis id="strong1009" effect="bold">
json

</emphasis>
 string contains an array, which in turn contains two 
	nested arrays.

</para>





<section id="h21001">
<title>
<emphasis id="Beginning_of_the_class_and_the_main_method" effect="bold">

Beginning of the class 
and the main method

</emphasis>


</title>




<para id="p1008">
I will discuss and explain the program in fragments. The first fragment is 
shown in 

<link id="a1034" target-id="Listing_1">

 Listing 1

</link>

.

</para>







<note id="note1000" type="">



 











<emphasis id="Listing_1" effect="bold">

Listing 1

</emphasis>

. Beginning of the class and the main method.


<code id="pre1000" display="block">
import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import java.io.PrintWriter;
import java.io.File;
import java.io.IOException;

class Code{

  public static void main(String[] args){
    //Create a json object. which is a subclass
    // of the Java HashMap class.
    JSONObject hashMapA = new JSONObject();
    
    //Populate the json object with a key/value
    // pair.
    hashMapA.put("name","Tom");</code>




</note>















<para id="p1009">
There is nothing new in 

<link id="a1035" target-id="Listing_1">

 Listing 1

</link>

 so that code shouldn't require further 
explanation. Note however, that the name "Tom" will become significant in a 
later discussion.

</para>





</section>
<section id="h21002">
<title>
<emphasis id="Instantiate_and_populate_a_JSONArray_object" effect="bold">

Instantiate and 
populate a JSONArray object

</emphasis>


</title>




<para id="p1010">
The code in 

<link id="a1036" target-id="Listing_2">

 Listing 2

</link>

 instantiates and populates a 

<emphasis id="strong1010" effect="bold">
JSONArray

</emphasis>
 
object.

</para>









<note id="note1001" type="">



 











<emphasis id="Listing_2" effect="bold">

Listing 2

</emphasis>

. Instantiate and populate a JSONArray object.


<code id="pre1001" display="block">
    JSONArray arrayListA = new JSONArray();
    arrayListA.add("2-club");
    arrayListA.add("3-heart");
    arrayListA.add("4-diamond");
    arrayListA.add("5-spade");</code>




</note>















<para id="p1011">
Previous pages in this book have constructed JSON strings using a subclass of 
the Java 

<emphasis id="strong1011" effect="bold">
HashMap

</emphasis>
 class -- 

<emphasis id="em1005" effect="italics">
(the 

<emphasis id="strong1012" effect="bold">
JSONObject

</emphasis>
 class)

</emphasis>
. 
It is worth noting that JSON strings constructed in that manner are unordered. 
However, JSON arrays constructed using the 

<emphasis id="strong1013" effect="bold">
JSONArray

</emphasis>
 class, 
which is a subclass of the 

<emphasis id="strong1014" effect="bold">
ArrayList

</emphasis>
 class, are ordered lists.

</para>





<para id="p1012">
The program that I will explain in this page is intended to represent the 
beginning state of a two-person card game where each player receives four cards. 
The code in 

<link id="a1037" target-id="Listing_2">

 Listing 2

</link>

 constructs a list of the cards that will be dealt to one of the 
players.

</para>





</section>
<section id="h21003">
<title>
<emphasis id="Populate_hashMapA_with_akeyValue_pair" effect="bold">

Populate hashMapA with a 
key/value pair

</emphasis>


</title>




<para id="p1013">
The code in 

<link id="a1038" target-id="Listing_3">

 Listing 3

</link>

 populates the 

<emphasis id="strong1015" effect="bold">
JSONObject

</emphasis>
 object referred to as 

<emphasis id="strong1016" effect="bold">
hashMapA

</emphasis>
 with 
a key/value pair where the key is "cards" and the value is an object of the 


<emphasis id="strong1017" effect="bold">
JSONArray

</emphasis>
 class containing a list of strings naming specific 
playing cards.

</para>









<note id="note1002" type="">



 











<emphasis id="Listing_3" effect="bold">

Listing 3

</emphasis>

. Populate hashMapA.


<code id="pre1002" display="block">
    hashMapA.put("cards",arrayListA);
</code>




</note>















<para id="p1014">
Note that 

<emphasis id="strong1018" effect="bold">
hashMapA

</emphasis>
 already contained a key/value pair 
identifying one of the players in the game named "Tom" 

<emphasis id="em1006" effect="italics">
(see 

<link id="a1039" target-id="Listing_1">

 Listing 1

</link>

). 

</emphasis>

Thus the code in 

<link id="a1040" target-id="Listing_1">

 Listing 1

</link>

 through 

<link id="a1041" target-id="Listing_3">

 Listing 3

</link>

 can be though of as "dealing" the 
cards identified in 

<link id="a1042" target-id="Listing_2">

 Listing 2

</link>

 to the player named "Tom".

</para>





</section>
<section id="h21004">
<title>
<emphasis id="Create_and_populate_another_similar_JSON_object" effect="bold">

Create and 
populate another similar JSON object

</emphasis>


</title>




<para id="p1015">
<link id="a1043" target-id="Listing_4">

 Listing 4

</link>

 creates and populates a second list of playing cards and deals them to the second player in the game whose name is "Joe".

</para>









<note id="note1003" type="">



 











<emphasis id="Listing_4" effect="bold">

Listing 4

</emphasis>

. Create and populate another similar JSON 
object.


<code id="pre1003" display="block">
    JSONObject hashMapB = new JSONObject();
    hashMapB.put("name","Joe");
    
    JSONArray arrayListB = new JSONArray();
    arrayListB.add("4-heart");
    arrayListB.add("5-heart");
    arrayListB.add("6-club");
    arrayListB.add("7-diamond");
    hashMapB.put("cards",arrayListB);
</code>




</note>















</section>
<section id="h21005">
<title>
<emphasis id="Put_the_players_in_the_game" effect="bold">

Put the players in the game

</emphasis>


</title>




<para id="p1016">
Now that the players have been created and have received their cards, it is 
time to put them in the game.

</para>





<para id="p1017">
<link id="a1044" target-id="Listing_5">

 Listing 5

</link>

 begins by adding the two players and their card arrays to a new 
object of type 

<emphasis id="strong1019" effect="bold">
JSONArray

</emphasis>
. This results in nested arrays.

</para>









<note id="note1004" type="">



 











<emphasis id="Listing_5" effect="bold">

Listing 5

</emphasis>

. Put the players in the game.


<code id="pre1004" display="block">
    JSONArray arrayListC = new JSONArray();
    arrayListC.add(hashMapA);
    arrayListC.add(hashMapB);

    JSONObject hashMapC = new JSONObject();
    hashMapC.put("game",arrayListC);
</code>




</note>















<para id="p1018">
Then 

<link id="a1045" target-id="Listing_5">

 Listing 5

</link>

 creates a new 

<emphasis id="strong1020" effect="bold">
JSONObject

</emphasis>
 object to represent 
the game and populates 
it with a key/value pair where the key is "game" and the value is the array containing the two players 
and their card arrays.

</para>





</section>
<section id="h21006">
<title>
<emphasis id="Write_the_JSON_string_to_an_output_file" effect="bold">

Write the JSON string to 
an output file

</emphasis>


</title>




<para id="p1019">
<link id="a1046" target-id="Listing_6">

 Listing 6

</link>

 calls the 

<emphasis id="strong1021" effect="bold">
writeJSONString

</emphasis>
 method on the 

<emphasis id="strong1022" effect="bold">
JSONObject

</emphasis>
 
object to encode the object into a JSON string and write it to an output file 
named 

<emphasis id="strong1023" effect="bold">
junk.json

</emphasis>
.

</para>









<note id="note1005" type="">



 











<emphasis id="Listing_6" effect="bold">

Listing 6

</emphasis>

. Write the JSON string to an output file.


<code id="pre1005" display="block">
    try{
      PrintWriter out = 
          new PrintWriter(new File("junk.json"));
      hashMapC.writeJSONString(out);
      out.flush();
    }catch(IOException ex){
      ex.printStackTrace();
    }//end catch

  }//end main

}//end class Code
</code>




</note>















<para id="p1020">
Note that the output file is simply a text file with the extension 

<emphasis id="strong1024" effect="bold">

.json

</emphasis>
. Thus it can be read by any program that is capable of reading 
plain text files.

</para>





</section>
<section id="h21007">
<title>
<emphasis id="The_end_of_the_program" effect="bold">

The end of the program

</emphasis>


</title>




<para id="p1021">
<link id="a1047" target-id="Listing_6">

 Listing 6

</link>

 also signals the end of the 

<emphasis id="strong1025" effect="bold">
main

</emphasis>
 method and the 
end of the program.

</para>





</section>
<section id="h21008">
<title>
<emphasis id="The_contents_of_the_output_file" effect="bold">

The contents of the output file

</emphasis>


</title>




<para id="p1022">
<link id="a1048" target-id="Figure_1">

 Figure 1

</link>

 shows a "prettified" version of the contents of the output file.

</para>





<note id="note1006" type="">



 












<emphasis id="Figure_1" effect="bold">

Figure 1.

</emphasis>

 Prettified version of output file contents.


<code id="pre1006" display="block">
{"game":
  [
    {
      "cards":
      [
        "2-club","3-heart","4-diamond","5-spade"
      ],
      "name":"Tom"
    },
    {
      "cards":
      [
        "4-heart","5-heart","6-club","7-diamond"
      ],
      "name":"Joe"
    }
  ]
}
</code>




</note>
















<para id="p1023">
The actual contents of the file do not contain line breaks and indentation as 
shown in 

<link id="a1049" target-id="Figure_1">

 Figure 1

</link>

. Those cosmetic features were added manually to 

<link id="a1050" target-id="Figure_1">

 Figure 1

</link>

 to make it 
easier for you to correlate the output with the code shown earlier. Instead, the actual file consists simply of a string of 
characters that begins as shown in 

<link id="a1051" target-id="Figure_2">

 Figure 2

</link>

.

</para>






<note id="note1007" type="">













<emphasis id="Figure_2" effect="bold">

Figure 2.

</emphasis>

 Beginning of output file contents.


<code id="pre1007" display="block">
{"game":[{"cards":["2-club","3-heart","4-diamond","5-spade"],...
</code>


 

</note>
















</section>
<section id="h21009">
<title>
<emphasis id="Decoded_output_data" effect="bold">

Decoded output data

</emphasis>


</title>




<para id="p1024">
As mentioned earlier, a later page in this book will read the JSON string from the file and decode 
it into its component parts. 

<link id="a1052" target-id="Figure_3">

 Figure 3

</link>

 shows a preview of what you will see on 
that page.

</para>






<note id="note1008" type="">



 











<emphasis id="Figure_3" effect="bold">

Figure 3.

</emphasis>

 Decoded output data.


<code id="pre1008" display="block">
First Player's Name: Tom
First Player's cards
2-club
3-heart
4-diamond
5-spade

Second Player's Name: Joe
Second Player's cards
4-heart
5-heart
6-club
7-diamond
</code>




</note>
















<para id="p1025">
<link id="a1053" target-id="Figure_3">

 Figure 3

</link>

 shows the JSON string decoded and formatted into a display that is 
representative of the intent of the string -- to encapsulate information about 
the players and their cards in a game of cards.

</para>






</section>
</section>
<section id="h11004">
<title>
<emphasis id="Run_the_program" effect="bold">

Run the program

</emphasis>


</title>





<para id="p1026">
I encourage you to copy the code from 

<link id="a1054" target-id="Listing_7">

 Listing 7

</link>

. Execute the code and confirm 
that your output file matches that shown in 

<link id="a1055" target-id="Figure_2">

 Figure 2

</link>

. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.

</para>





</section>
<section id="h11005">
<title>
<emphasis id="Complete_program_listings" effect="bold">

Complete program listing

</emphasis>


</title>




<para id="p1027">
<link id="a1056" target-id="Listing_7">

 Listing 7

</link>

 provides a complete listing of the program named 

<emphasis id="strong1026" effect="bold">
Code.java

</emphasis>
.

</para>










<note id="note1009" type="">















<emphasis id="Listing_7" effect="bold">

Listing 7

</emphasis>

. The program named Code.java.


<code id="pre1009" display="block">
/************************************************
Copyright: R.G.Baldwin 2016
Revised: 06/01/16

Creates a json string and writes it to an output 
file. The json string contains an array, which in
turn contains two arrays.

Tested with Java 8, Windows 7, and 
json-simple-1.1.1.
************************************************/

import org.json.simple.JSONObject;
import org.json.simple.JSONArray;
import java.io.PrintWriter;
import java.io.File;
import java.io.IOException;

class Code{

  public static void main(String[] args){
    //Create a json object. which is a subclass
    // of the Java HashMap class.
    JSONObject hashMapA = new JSONObject();
    
    //Populate the json object with a key/value
    // pair.
    hashMapA.put("name","Tom");
    
    //Create and populate a json array, which is
    // a subclass of the Java ArrayList class.
    JSONArray arrayListA = new JSONArray();
    arrayListA.add("2-club");
    arrayListA.add("3-heart");
    arrayListA.add("4-diamond");
    arrayListA.add("5-spade");
    
    //Populate the json object with a key/value
    // pair where the value is an array.
    hashMapA.put("cards",arrayListA);
 
    //Create and populate another similar json
    // object.
    JSONObject hashMapB = new JSONObject();
    hashMapB.put("name","Joe");
    
    JSONArray arrayListB = new JSONArray();
    arrayListB.add("4-heart");
    arrayListB.add("5-heart");
    arrayListB.add("6-club");
    arrayListB.add("7-diamond");
    hashMapB.put("cards",arrayListB);

    //Create another json array and populate
    // it with the two json objects created
    // earlier.
    JSONArray arrayListC = new JSONArray();
    arrayListC.add(hashMapA);
    arrayListC.add(hashMapB);

    //Create another json object and populate
    // it with a key/value pair where the value
    // is the array from above.
    JSONObject hashMapC = new JSONObject();
    hashMapC.put("game",arrayListC);
    
    try{
      //Encode the HashMap object into a 
      // json String and write it to an output
      // file. Note that it is simply a text file
      // with a different extension.
      PrintWriter out = 
          new PrintWriter(new File("junk.json"));
      hashMapC.writeJSONString(out);
      out.flush();
    }catch(IOException ex){
      ex.printStackTrace();
    }//end catch

  }//end main

}//end class Code

</code>




</note>















	

</section>
<section id="h11006">
<title>
<emphasis id="Miscellaneous" effect="bold">

Miscellaneous

</emphasis>


</title>


	

<para id="p1028">
This section contains a variety of miscellaneous information.

</para>





	

<note id="note1010" type="">


		


			


				

<emphasis id="strong1027" effect="bold">
Housekeeping material

</emphasis>

				

<list id="ul1007" list-type="bulleted">

					

<item id="li1032">
Module name: Json0225: Encoding JSON Arrays

</item>


					

<item id="li1033">
File: Json0225.htm

</item>


					

<item id="li1034">
Published: 06/01/16

</item>



				

</list>



				

</note>





	

<note id="note1011" type="">


		


			


				

<emphasis id="strong1028" effect="bold">
Disclaimers:

</emphasis>
<para id="p1029">
<emphasis id="strong1029" effect="bold">
Financial

</emphasis>
: Although the Connexions
site makes it possible for you to download a PDF file for this
module at no charge, and also makes it possible for you to
purchase a pre-printed version of the PDF file, you should be
aware that some of the HTML elements in this module may not translate well into
PDF.

</para>



				

<para id="p1030">
I also want you to know that, I receive no financial compensation from the Connexions website even if you purchase 
	the PDF version of the module.

</para>



				

<para id="p1031">
In the past, unknown individuals have copied my modules from cnx.org, converted them to Kindle books, and 
				placed them for sale on Amazon.com showing me as the author. I 
				neither receive compensation for those sales nor do I know who does 
				receive compensation. If you purchase such a book, please be 
				aware that it is a copy of a module that is freely 
				available on cnx.org and that it was made and published without 
				my prior knowledge.

</para>



				

<para id="p1032">
<emphasis id="strong1030" effect="bold">
Affiliation

</emphasis>
: I am a professor of Computer Information 
	Technology at Austin Community College in Austin, TX.
	

</para>




</note>



	


<para id="p1033">
-end- 

</para>







</section>
</content>




</document>